import { Get{{ pascalCase usecase_name }}UseCase } from '@/app/usecases/{{ kebabCase usecase_name }}/get-{{ kebabCase usecase_name }}.usecase';
import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { mock{{ pascalCase usecase_name }} } from '@test/_mock/model/{{ kebabCase usecase_name }}.mock';
import { mock{{ pascalCase usecase_name }}Repository } from '@test/_mock/repository/{{ kebabCase usecase_name }}.repository.mock';

interface SutTypes {
  sut: Get{{ pascalCase usecase_name }}UseCase;
  {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository;
}
const makeSut = (): SutTypes => {
  const {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository = mock{{ pascalCase usecase_name }}Repository();

  const sut = new Get{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository);
  return { sut, {{ camelCase usecase_name }}Repository };
};
describe('Get{{ pascalCase usecase_name }}UseCase', () => {
  it('should get a {{ pascalCase usecase_name }}', async () => {
    const { sut, {{ camelCase usecase_name }}Repository } = makeSut();

    const result = await sut.execute(mock{{ pascalCase usecase_name }}.id);

    expect(result.id).toEqual(mock{{ pascalCase usecase_name }}.id);
    expect({{ camelCase usecase_name }}Repository.find).toHaveBeenCalledWith(mock{{ pascalCase usecase_name }}.id);
  });
});
