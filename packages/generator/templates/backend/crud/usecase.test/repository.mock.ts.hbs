import { {{ pascalCase usecase_name }}Model } from '@/domain/models/{{ kebabCase usecase_name }}.model';
import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { Paginated } from '@/domain/protocols/database/types/pagination.types';
import { mock{{ pascalCase usecase_name }}, mock{{ pascalCase usecase_name }}Update } from '../model/{{ kebabCase usecase_name }}.mock';

export const mock{{ pascalCase usecase_name }}Repository = (): I{{ pascalCase usecase_name }}Repository => ({
  create: jest.fn().mockReturnValue(mock{{ pascalCase usecase_name }}),
  find: jest.fn().mockReturnValue(mock{{ pascalCase usecase_name }}),
  delete: jest.fn(),
  update: jest.fn().mockReturnValue(mock{{ pascalCase usecase_name }}Update),
  list: jest.fn().mockReturnValue({
    data: [mock{{ pascalCase usecase_name }}],
    total: 1,
    currentPage: 1,
    lastPage: 1,
    perPage: 20,
  } as Paginated<{{ pascalCase usecase_name }}Model>),
});
