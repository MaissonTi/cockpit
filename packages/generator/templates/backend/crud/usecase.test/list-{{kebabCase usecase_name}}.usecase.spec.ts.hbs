import { List{{ pascalCase usecase_name }}UseCase } from '@/app/usecases/{{ kebabCase usecase_name }}/list-{{ kebabCase usecase_name }}.usecase';
import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { mock{{ pascalCase usecase_name }}Repository } from '@test/_mock/repository/{{ kebabCase usecase_name }}.repository.mock';

interface SutTypes {
  sut: List{{ pascalCase usecase_name }}UseCase;
  {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository;
}
const makeSut = (): SutTypes => {
  const {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository = mock{{ pascalCase usecase_name }}Repository();

  const sut = new List{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository);
  return { sut, {{ camelCase usecase_name }}Repository };
};
describe('List{{ pascalCase usecase_name }}UseCase', () => {
  it('should list multiple {{ pascalCase usecase_name }}', async () => {
    const { sut, {{ camelCase usecase_name }}Repository } = makeSut();

    const result = await sut.execute();

    expect(result.total).toEqual(1);
    expect({{ camelCase usecase_name }}Repository.list).toHaveBeenCalled();
  });

  it('should not return any {{ camelCase usecase_name }}', async () => {
    const { sut, {{ camelCase usecase_name }}Repository } = makeSut();
    jest.spyOn({{ camelCase usecase_name }}Repository, 'list').mockReturnValueOnce(
      Promise.resolve({
        total: 0,
        currentPage: 1,
        lastPage: 0,
        perPage: 20,
        data: [],
      }),
    );

    const result = await sut.execute();

    expect(result.total).toEqual(0);
    expect({{ camelCase usecase_name }}Repository.list).toHaveBeenCalled();
  });
});
