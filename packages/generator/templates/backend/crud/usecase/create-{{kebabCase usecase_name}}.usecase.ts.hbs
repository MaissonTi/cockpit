import { {{ pascalCase usecase_name }}Model } from '@/domain/models/{{ kebabCase usecase_name }}.model';
import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { ICreate{{ pascalCase usecase_name }}UseCase } from '@/domain/usecases/{{ kebabCase usecase_name }}/create-{{ kebabCase usecase_name }}.usecase.interface';

export class Create{{ pascalCase usecase_name }}UseCase implements ICreate{{ pascalCase usecase_name }}UseCase {
  constructor(private readonly {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository) {}
  async execute(data: ICreate{{ pascalCase usecase_name }}UseCase.Input): Promise<{{ pascalCase usecase_name }}Model> {
    return this.{{ camelCase usecase_name }}Repository.create({
      name: data.name,
    });
  }
}
