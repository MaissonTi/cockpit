import { {{ pascalCase usecase_name }}Model } from '@/domain/models/{{ kebabCase usecase_name }}.model';
import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { IUpdate{{ pascalCase usecase_name }}UseCase } from '@/domain/usecases/{{ kebabCase usecase_name }}/update-{{ kebabCase usecase_name }}.usecase.interface';
import { NotFoundException } from '@nestjs/common';

export class Update{{ pascalCase usecase_name }}UseCase implements IUpdate{{ pascalCase usecase_name }}UseCase {
  constructor(private readonly {{ camelCase usecase_name }}Repository: I{{ pascalCase usecase_name }}Repository) {}
  async execute(id: string, data: IUpdate{{ pascalCase usecase_name }}UseCase.Input): Promise<{{ pascalCase usecase_name }}Model> {
    const result = await this.{{ camelCase usecase_name }}Repository.find(id);

    if (!result) {
      throw new NotFoundException(`{{ pascalCase usecase_name }} not found`);
    }

    return this.{{ camelCase usecase_name }}Repository.update(id, data);
  }
}
