import { Module } from '@nestjs/common';
import { {{ pascalCase usecase_name }}Repository } from '@/infra/database/prisma/repositories/{{ kebabCase usecase_name }}.repository';
import { Create{{ pascalCase usecase_name }}UseCase } from '@/app/usecases/{{ kebabCase usecase_name }}/create-{{ kebabCase usecase_name }}.usecase';
import { InfraModule } from '@/infra/_infra.module';
import { Delete{{ pascalCase usecase_name }}UseCase } from './delete-{{ kebabCase usecase_name }}.usecase';
import { Update{{ pascalCase usecase_name }}UseCase } from './update-{{ kebabCase usecase_name }}.usecase';
import { Get{{ pascalCase usecase_name }}UseCase } from './get-{{ kebabCase usecase_name }}.usecase';
import { List{{ pascalCase usecase_name }}UseCase } from './list-{{ kebabCase usecase_name }}.usecase';

@Module({
  imports: [InfraModule],
  providers: [
    {
      inject: [{{ pascalCase usecase_name }}Repository.name],
      provide: Create{{ pascalCase usecase_name }}UseCase.name,
      useFactory: ({{ camelCase usecase_name }}Repository: {{ pascalCase usecase_name }}Repository) => new Create{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository),
    },
    {
      inject: [{{ pascalCase usecase_name }}Repository.name],
      provide: Delete{{ pascalCase usecase_name }}UseCase.name,
      useFactory: ({{ camelCase usecase_name }}Repository: {{ pascalCase usecase_name }}Repository) => new Delete{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository),
    },
    {
      inject: [{{ pascalCase usecase_name }}Repository.name],
      provide: Update{{ pascalCase usecase_name }}UseCase.name,
      useFactory: ({{ camelCase usecase_name }}Repository: {{ pascalCase usecase_name }}Repository) => new Update{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository),
    },
    {
      inject: [{{ pascalCase usecase_name }}Repository.name],
      provide: Get{{ pascalCase usecase_name }}UseCase.name,
      useFactory: ({{ camelCase usecase_name }}Repository: {{ pascalCase usecase_name }}Repository) => new Get{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository),
    },
    {
      inject: [{{ pascalCase usecase_name }}Repository.name],
      provide: List{{ pascalCase usecase_name }}UseCase.name,
      useFactory: ({{ camelCase usecase_name }}Repository: {{ pascalCase usecase_name }}Repository) => new List{{ pascalCase usecase_name }}UseCase({{ camelCase usecase_name }}Repository),
    },
  ],
  exports: [
    Create{{ pascalCase usecase_name }}UseCase.name,
    Delete{{ pascalCase usecase_name }}UseCase.name,
    Update{{ pascalCase usecase_name }}UseCase.name,
    Get{{ pascalCase usecase_name }}UseCase.name,
    List{{ pascalCase usecase_name }}UseCase.name,
  ],
})
export class {{ pascalCase usecase_name }}Module {}
