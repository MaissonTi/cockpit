import { I{{ pascalCase usecase_name }}Repository } from '@/domain/protocols/database/repositories/{{ kebabCase usecase_name }}.repository.interface';
import { Paginated, Pagination } from '@/domain/protocols/database/types/pagination.types';
import { PrismaService } from '../prisma.service';
import { {{ pascalCase usecase_name }}Model } from '@/domain/models/{{ kebabCase usecase_name }}.model';
import { {{ pascalCase usecase_name }}Mapper } from '../mapper/{{ kebabCase usecase_name }}.mapper';
import { Repositories } from './_repositories.abstract';

export class {{ pascalCase usecase_name }}Repository extends Repositories implements I{{ pascalCase usecase_name }}Repository {
  constructor(protected readonly prisma: PrismaService) {
    super(prisma);
  }

  async find(id: string): Promise<{{ pascalCase usecase_name }}Model | null> {
    const result = await this.prisma.{{ camelCase usecase_name }}.findFirst({
      where: { id },
    });
    return {{ pascalCase usecase_name }}Mapper.toModel(result);
  }

  async update(id: string, data: {{ pascalCase usecase_name }}Model): Promise<{{ pascalCase usecase_name }}Model> {
    const result = await this.prisma.{{ camelCase usecase_name }}.update({
      where: { id: id },
      data: {{ pascalCase usecase_name }}Mapper.toPrisma(data),
    });

    return {{ pascalCase usecase_name }}Mapper.toModel(result);
  }
  async delete(id: string): Promise<void> {
    await this.prisma.{{ camelCase usecase_name }}.delete({
      where: {
        id,
      },
    });
  }

  async create(data: I{{ pascalCase usecase_name }}Repository.paramsCreate): Promise<{{ pascalCase usecase_name }}Model> {
    const result = await this.prisma.{{ camelCase usecase_name }}.create({
      data: {
        name: data.name,
      },
    });
    return {{ pascalCase usecase_name }}Mapper.toModel(result);
  }

  async list(where: Partial<{{ pascalCase usecase_name }}Model>, pagination?: Pagination): Promise<Paginated<{{ pascalCase usecase_name }}Model>> {
    const [total, data] = await this.prisma.$transaction([
      this.prisma.{{ camelCase usecase_name }}.count({
        where,
      }),
      this.prisma.{{ camelCase usecase_name }}.findMany({
        where,
        ...this.pageSkipTake(pagination),
        orderBy: { createdAt: 'desc' },
      }),
    ]);
    return { ...this.pageInfo(total, pagination), data: data.map({{ pascalCase usecase_name }}Mapper.toModel) };
  }
}
